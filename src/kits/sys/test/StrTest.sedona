//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   28 Mar 07  Brian Frank  Creation
//

class StrTest
  extends Test
{
  static inline Str(8) s = "xyz"
  
  /* LOOPTEST
  static void testReset()
  {
    s.copyFromStr("xyz", 8)
  }
  */

  static void testEquals()
  {
    assert(s.equals("xyz"))
    assert("a".equals("a"))
    assert(!"a".equals("ab"))
    assert(!"ab".equals("a"))
    assert(!"ab".equals("aB"))
    assert("AB".equals("AB"))
  }

  static void testEqualsRegion()
  {
    Str x = "xyz"
    assert(x.equalsRegion("xyz", 0, 1))
    assert(x.equalsRegion("xyz", 0, 3))
    assert(x.equalsRegion("xyz", 0, 100))
    assert(!x.equalsRegion("axyz", 0, 100))
    assert(x.equalsRegion("axyz", 1, 4))
    assert(x.equalsRegion("axyz", 1, 100))
    assert(!x.equalsRegion("ax", 1, 100))
    x = "xy"
    assert(x.equalsRegion("axyz", 1, 2))
    assert(!x.equalsRegion("axyz", 1, 100))
  }

  static void testStartsWith()
  {
    Str x = "xyz"           
    assert(x.startsWith("x"))
    assert(x.startsWith("xy"))
    assert(x.startsWith("xyz"))
    assert(!x.startsWith("xyz!"))
    assert(!x.startsWith("X"))
    assert(!x.startsWith("x?"))
  }

  static void testIndex()
  {
    Str x = "xyz"
    assert(x.index('x') == 0)
    assert(x.index('z') == 2)
    assert(x.index('a') == -1)
  }

  static void testSet()
  {
    assert(s.copyFromStr("a", 3));     assert(s.equals("a"))
    assert(s.copyFromStr("bc", 3));    assert(s.equals("bc"))
    assert(!s.copyFromStr("def", 3));  assert(s.equals("de"))
  }

  static void testLength()
  {
    assert("".length() == 0)
    assert("a".length() == 1)
    assert("bc".length() == 2)
  }

  static void testTrim()
  {
    s.copyFromStr("", 8);         assert(s.trim().equals(""))
    s.copyFromStr(" ", 8);        assert(s.trim().equals(""))
    s.copyFromStr("  ", 8);       assert(s.trim().equals(""))
    s.copyFromStr(" a", 8);       assert(s.trim().equals("a"))
    s.copyFromStr("a ", 8);       assert(s.trim().equals("a"))
    s.copyFromStr(" x ", 8);      assert(s.trim().equals("x"))
    s.copyFromStr("  def  ", 8);  assert(s.trim().equals("def"))
  }

  static void testSuffix()
  {
    s.copyFromStr("abcdefg", 8);  assert(s.suffix(0).equals("abcdefg"))
    s.copyFromStr("abcdefg", 8);  assert(s.suffix(1).equals("bcdefg"))
    s.copyFromStr("abcdefg", 8);  assert(s.suffix(2).equals("cdefg"))
    s.copyFromStr("abcdefg", 8);  assert(s.suffix(6).equals("g"))
  }

  static void testParseInt()
  {
    assert("".parseInt() == -1)
    assert("-".parseInt() == -1)
    assert("x".parseInt() == -1)
    assert("0".parseInt() == 0)
    assert("8".parseInt() == 8)
    assert("12".parseInt() == 12)
    assert("12456".parseInt() == 12456)
    assert("-12456".parseInt() == -12456)
    assert("-3".parseInt() == -3)
  }

  static void testInterpolation()
  {
    Buf buf = BufTest.buf
    OutStream out = BufTest.out
    int x = 0xbad
    bool b = true

    buf.clear()
    out.print("(" + x + " " + Sys.hexStr(x) + ")")
    out.write(0)
    assert(buf.toStr().equals("(2989 bad)"))

		
    buf.clear()
    BufTest.copyBuf.size = 4
    out.print("($b \$ ${Sys.hexStr(x)} $BufTest.copyBuf.size)").write(0)
    assert(buf.toStr().equals("(true \$ bad 4)"))
   	BufTest.copyBuf.clear()

    long j = 4L
    float f = 20f
    double d = 256d
    buf.clear()
    out.print("$j $f $d").write(0)
    assert(buf.toStr().equals("4 20.000000 256.000000"))
    
    assert(literalFolding.equals("abc"))
  }

  static Str literalFolding = "a" + "b" + "c"
}
