** 
** Bool message defines a boolean type MQTT topic data point. There are 2 use cases:
**  1. when put it within a Publisher object, it will publish it's payload to 
**     the MQTT broker configured by the Publisher object (publishing mode)
**  2. when put it within a Subscriber object, it will fetch data from MQTT broker
**     configured by the Subscriber object (subscription mode)
**
** Just like other type of Message object, BoolMessage's parent must be Publisher or Subscriber, otherwise it will not work
** 
** By BoolMessage, you can configure the following MQTT related things: 
**  1. MQTT topic 
**  2. MQTT QoS
**  3. publishInterval (how often to publish data, publishing mode)
**  4. updateInterval (how often to check data update, subscription mode)
** 
** The 'error' slot will show error message if something is wrong.
** 
class BoolMessage extends Message
{
  property bool payload = false

  ** 
  ** return the payload string, 
  ** shouldn't be called by outside
  ** 
  protected override Str getPayload() 
  { 
    if (payload)
        return "1";
    else
        return "0";
  }

  ** 
  ** callback method to update local data, 
  ** shouldn't be called by outside
  **
  protected override bool updateData(Obj handle) 
  {
    bool result = super.updateData(handle)
    if (!result)
      return result

    payload := strBuf.equals("true") || strBuf.equals("True") || strBuf.equals("TRUE") || strBuf.equals("1")
    return result
  }
}
